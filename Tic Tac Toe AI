import tkinter as tk
from tkinter import messagebox

root = tk.Tk()
root.title("Tic Tac Toe AI")
root.configure(bg="#f0f0f0")

board = [[" " for _ in range(3)] for _ in range(3)]
buttons = [[None for _ in range(3)] for _ in range(3)]
first_player = "X"

def check_winner(brd):
    for i in range(3):
        if brd[i][0] == brd[i][1] == brd[i][2] != " ":
            return brd[i][0]
        if brd[0][i] == brd[1][i] == brd[2][i] != " ":
            return brd[0][i]
    if brd[0][0] == brd[1][1] == brd[2][2] != " ":
        return brd[0][0]
    if brd[0][2] == brd[1][1] == brd[2][0] != " ":
        return brd[0][2]
    return None

def is_full(brd):
    return all(cell != " " for row in brd for cell in row)

def disable_all_buttons():
    for i in range(3):
        for j in range(3):
            buttons[i][j].config(state="disabled")

def minimax(brd, depth, is_maximizing):
    winner = check_winner(brd)
    if winner == "O":
        return 1
    elif winner == "X":
        return -1
    elif is_full(brd):
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for i in range(3):
            for j in range(3):
                if brd[i][j] == " ":
                    brd[i][j] = "O"
                    score = minimax(brd, depth + 1, False)
                    brd[i][j] = " "
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(3):
            for j in range(3):
                if brd[i][j] == " ":
                    brd[i][j] = "X"
                    score = minimax(brd, depth + 1, True)
                    brd[i][j] = " "
                    best_score = min(score, best_score)
        return best_score

def ai_move():
    best_score = -float("inf")
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    if move:
        i, j = move
        board[i][j] = "O"
        buttons[i][j].config(text="O", fg="red", state="disabled")
        winner = check_winner(board)
        if winner:
            messagebox.showinfo("Game Over", f"{winner} wins!")
            disable_all_buttons()
        elif is_full(board):
            messagebox.showinfo("Game Over", "It's a draw!")
            disable_all_buttons()

def on_click(i, j):
    if board[i][j] == " ":
        board[i][j] = "X"
        buttons[i][j].config(text="X", fg="blue", state="disabled")
        winner = check_winner(board)
        if winner:
            messagebox.showinfo("Game Over", f"{winner} wins!")
            disable_all_buttons()
            return
        elif is_full(board):
            messagebox.showinfo("Game Over", "It's a draw!")
            disable_all_buttons()
            return
        root.after(500, ai_move)

def reset_game():
    global board, first_player
    board = [[" " for _ in range(3)] for _ in range(3)]
    for i in range(3):
        for j in range(3):
            buttons[i][j].config(text=" ", state="normal", bg="#ffffff")

    choice = messagebox.askquestion("First Turn", "Do you want to go first?")
    if choice == "yes":
        first_player = "X"
    else:
        first_player = "O"
        root.after(500, ai_move)

# Create 3x3 button grid
for i in range(3):
    for j in range(3):
        btn = tk.Button(root, text=" ", width=10, height=4,
                        bg="#ffffff", fg="black",
                        activebackground="#e0e0e0",
                        font=('Segoe UI', 20, 'bold'),
                        command=lambda r=i, c=j: on_click(r, c))
        btn.grid(row=i, column=j, padx=2, pady=2)
        buttons[i][j] = btn

# Restart button
restart_btn = tk.Button(root, text="Restart", font=('Segoe UI', 14), bg="#dcdcdc", command=reset_game)
restart_btn.grid(row=3, column=0, columnspan=3, sticky="nsew", padx=5, pady=5)

# Start game
reset_game()
root.mainloop()

